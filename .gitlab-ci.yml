default:
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"

stages:
  - build
  - test
  - deploy

build:
  stage: build
  script:
    - docker-compose build
    - docker tag docker.io/library/lab-5-client $CI_REGISTRY_IMAGE/client
    - docker tag docker.io/library/lab-5-server $CI_REGISTRY_IMAGE/server
    - docker tag docker.io/library/lab-5-nginx $CI_REGISTRY_IMAGE/nginx
    - docker push $CI_REGISTRY_IMAGE/client
    - docker push $CI_REGISTRY_IMAGE/server
    - docker push $CI_REGISTRY_IMAGE/nginx
  only:
    changes:
      - react-frontend/**/*
      - spring-backend/**/*

test-backend:
  image: maven:3.8.7-openjdk-18-slim
  stage: test
  tags:
    - docker
  services:
    - name: mysql:5.7
  variables:
    MYSQL_DATABASE: hobbie_db
    MYSQL_ROOT_PASSWORD: root
  script:
    - cd spring-backend
    - mvn test

test-frontend:
  image: node:18-alpine
  stage: test
  tags:
    - docker
  before_script:
    - cd react-frontend
  script:
    - npm install
    - npm run test

deploy:
  stage: deploy
  script:
    - docker pull $CI_REGISTRY_IMAGE/client
    - docker pull $CI_REGISTRY_IMAGE/server
    - docker pull $CI_REGISTRY_IMAGE/nginx
    - docker save $CI_REGISTRY_IMAGE/client | ssh -C user@my.host docker load
    - docker save $CI_REGISTRY_IMAGE/server | ssh -C user@my.host docker load
    - docker save $CI_REGISTRY_IMAGE/nginx | ssh -C user@my.host docker load
